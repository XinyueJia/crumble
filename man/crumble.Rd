% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/crumble.R
\name{crumble}
\alias{crumble}
\title{Mediation analysis using modified treatment policies and recanting twins}
\usage{
crumble(
  data,
  trt,
  outcome,
  mediators,
  moc = NULL,
  covar,
  obs = NULL,
  id = NULL,
  d0 = NULL,
  d1 = NULL,
  learners_regressions = "glm",
  nn_module = sequential_module(),
  control = crumble_control()
)
}
\arguments{
\item{data}{[\code{data.frame}]\cr
A \code{data.frame} in wide format containing all necessary variables
for the estimation problem.}

\item{trt}{[\code{character}]\cr
A vector containing the column names of treatment variables.}

\item{outcome}{[\code{character(1)}]\cr
The column name of the outcome variable.}

\item{mediators}{[\code{character}]\cr
A vector containing the column names of the mediator variables.}

\item{moc}{[\code{character}]\cr
An optional vector containing the column names of the mediator-outcome confounders.}

\item{covar}{[\code{character}]\cr
An vector containing the column names of baseline covariates to be
controlled for.}

\item{obs}{[\code{character(1)}]\cr
An optional column name (with values coded as 0 or 1) for whether or not the \code{outcome} is observed.
Must be provided if there is missingness in the outcome! Default is \code{NULL}.}

\item{id}{[\code{character(1)}]\cr
An optional column name containing cluster level identifiers.}

\item{d0}{[\code{closure}]\cr
A two argument function that specifies how treatment variables should be shifted.
See examples for how to specify shift functions for continuous, binary, and categorical exposures.}

\item{d1}{[\code{closure}]\cr
A two argument function that specifies how treatment variables should be shifted.
See examples for how to specify shift functions for continuous, binary, and categorical exposures.}

\item{nn_module}{[\code{function}]\cr A function that returns a neural network module.}

\item{control}{[\code{crumble_control}]\cr
Control parameters for the estimation procedure. Use \code{crumble_control()} to set these values.}

\item{learners}{[\code{character}]\cr
A vector of \code{mlr3superlearner} algorithms
for estimation of the outcome regressions. Default is \code{"glm"}, a main effects GLM.}
}
\value{
A \code{crumble} object containing the following components:
\item{estimates}{A list of parameter estimates.}
\item{outcome_reg}{Predictions from the outcome regressions.}
\item{alpha_n}{A list of density ratio estimates.}
\item{alpha_r}{A list of density ratio estimates.}
\item{fits}{A list of the fitted values from the outcome regressions.}
\item{call}{The matched call.}
\item{natural}{A logical indicating if the natural direct effect is being estimated.}
}
\description{
Mediation analysis using modified treatment policies and recanting twins
}
\examples{
\donttest{
if (require("mma")) {
	data(weight_behavior, package = "mma")

	weight_behavior <- na.omit(weight_behavior)

	crumble(
		data = weight_behavior,
		trt = "sports",
		outcome = "bmi",
		covar = c("age", "sex", "tvhours"),
		mediators = c("exercises", "overweigh"),
		moc = "snack",
		d0 = \(data, trt) factor(rep(1, nrow(data)), levels = c("1", "2")),
		d1 = \(data, trt) factor(rep(2, nrow(data)), levels = c("1", "2")),
		learners = c("mean", "glm"),
		nn_module = sequential_module(),
		control = crumble_control(crossfit_folds = 1L, zprime_folds = 5L)
	)
}
}
}
